// Code generated by Speakeasy (https://speakeasy.com).

package components

import (
	"encoding/json"
	"fmt"
)

type CustomizedType string

const (
	CustomizedTypeIssue             CustomizedType = "issue"
	CustomizedTypeTimeEntry         CustomizedType = "time_entry"
	CustomizedTypeProject           CustomizedType = "project"
	CustomizedTypeVersion           CustomizedType = "version"
	CustomizedTypeDocument          CustomizedType = "document"
	CustomizedTypeUser              CustomizedType = "user"
	CustomizedTypeGroup             CustomizedType = "group"
	CustomizedTypeTimeEntryActivity CustomizedType = "time_entry_activity"
	CustomizedTypeIssuePriority     CustomizedType = "issue_priority"
	CustomizedTypeDocumentCategory  CustomizedType = "document_category"
)

func (e CustomizedType) ToPointer() *CustomizedType {
	return &e
}

func (e *CustomizedType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "issue":
		fallthrough
	case "time_entry":
		fallthrough
	case "project":
		fallthrough
	case "version":
		fallthrough
	case "document":
		fallthrough
	case "user":
		fallthrough
	case "group":
		fallthrough
	case "time_entry_activity":
		fallthrough
	case "issue_priority":
		fallthrough
	case "document_category":
		*e = CustomizedType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomizedType: %v", v)
	}
}

type FieldFormat string

const (
	FieldFormatEnumeration FieldFormat = "enumeration"
	FieldFormatString      FieldFormat = "string"
	FieldFormatVersion     FieldFormat = "version"
	FieldFormatAttachment  FieldFormat = "attachment"
	FieldFormatUser        FieldFormat = "user"
	FieldFormatList        FieldFormat = "list"
	FieldFormatLink        FieldFormat = "link"
	FieldFormatFloat       FieldFormat = "float"
	FieldFormatInt         FieldFormat = "int"
	FieldFormatDate        FieldFormat = "date"
	FieldFormatBool        FieldFormat = "bool"
	FieldFormatText        FieldFormat = "text"
)

func (e FieldFormat) ToPointer() *FieldFormat {
	return &e
}

func (e *FieldFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enumeration":
		fallthrough
	case "string":
		fallthrough
	case "version":
		fallthrough
	case "attachment":
		fallthrough
	case "user":
		fallthrough
	case "list":
		fallthrough
	case "link":
		fallthrough
	case "float":
		fallthrough
	case "int":
		fallthrough
	case "date":
		fallthrough
	case "bool":
		fallthrough
	case "text":
		*e = FieldFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldFormat: %v", v)
	}
}

type PossibleValues struct {
	Value *string `json:"value,omitempty"`
	Label *string `json:"label,omitempty"`
}

func (o *PossibleValues) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *PossibleValues) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

type CustomField struct {
	ID             *int64           `json:"id,omitempty"`
	Name           *string          `json:"name,omitempty"`
	CustomizedType *CustomizedType  `json:"customized_type,omitempty"`
	FieldFormat    *FieldFormat     `json:"field_format,omitempty"`
	Regexp         *string          `json:"regexp,omitempty"`
	MinLength      *int64           `json:"min_length,omitempty"`
	MaxLength      *int64           `json:"max_length,omitempty"`
	IsRequired     *bool            `json:"is_required,omitempty"`
	IsFilter       *bool            `json:"is_filter,omitempty"`
	Searchable     *bool            `json:"searchable,omitempty"`
	Multiple       *bool            `json:"multiple,omitempty"`
	DefaultValue   *string          `json:"default_value,omitempty"`
	Visible        *bool            `json:"visible,omitempty"`
	Trackers       []IDName         `json:"trackers,omitempty"`
	Roles          []Role           `json:"roles,omitempty"`
	PossibleValues []PossibleValues `json:"possible_values,omitempty"`
}

func (o *CustomField) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CustomField) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CustomField) GetCustomizedType() *CustomizedType {
	if o == nil {
		return nil
	}
	return o.CustomizedType
}

func (o *CustomField) GetFieldFormat() *FieldFormat {
	if o == nil {
		return nil
	}
	return o.FieldFormat
}

func (o *CustomField) GetRegexp() *string {
	if o == nil {
		return nil
	}
	return o.Regexp
}

func (o *CustomField) GetMinLength() *int64 {
	if o == nil {
		return nil
	}
	return o.MinLength
}

func (o *CustomField) GetMaxLength() *int64 {
	if o == nil {
		return nil
	}
	return o.MaxLength
}

func (o *CustomField) GetIsRequired() *bool {
	if o == nil {
		return nil
	}
	return o.IsRequired
}

func (o *CustomField) GetIsFilter() *bool {
	if o == nil {
		return nil
	}
	return o.IsFilter
}

func (o *CustomField) GetSearchable() *bool {
	if o == nil {
		return nil
	}
	return o.Searchable
}

func (o *CustomField) GetMultiple() *bool {
	if o == nil {
		return nil
	}
	return o.Multiple
}

func (o *CustomField) GetDefaultValue() *string {
	if o == nil {
		return nil
	}
	return o.DefaultValue
}

func (o *CustomField) GetVisible() *bool {
	if o == nil {
		return nil
	}
	return o.Visible
}

func (o *CustomField) GetTrackers() []IDName {
	if o == nil {
		return nil
	}
	return o.Trackers
}

func (o *CustomField) GetRoles() []Role {
	if o == nil {
		return nil
	}
	return o.Roles
}

func (o *CustomField) GetPossibleValues() []PossibleValues {
	if o == nil {
		return nil
	}
	return o.PossibleValues
}
