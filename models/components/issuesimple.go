// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/dmji/go-redmine/internal/utils"
	"time"
)

type IssueSimple struct {
	ID                  int64              `json:"id"`
	Project             IDName             `json:"project"`
	Tracker             IDName             `json:"tracker"`
	Status              IssueStatus        `json:"status"`
	Priority            IDName             `json:"priority"`
	Author              IDName             `json:"author"`
	AssignedTo          *IDName            `json:"assigned_to,omitempty"`
	Category            *IDName            `json:"category,omitempty"`
	Subject             string             `json:"subject"`
	Description         *string            `json:"description"`
	StartDate           *string            `json:"start_date"`
	DueDate             *string            `json:"due_date"`
	DoneRatio           int64              `json:"done_ratio"`
	IsPrivate           bool               `json:"is_private"`
	EstimatedHours      *float64           `json:"estimated_hours"`
	TotalEstimatedHours *float64           `json:"total_estimated_hours"`
	SpentHours          *float64           `json:"spent_hours,omitempty"`
	TotalSpentHours     *float64           `json:"total_spent_hours,omitempty"`
	CustomFields        []CustomFieldValue `json:"custom_fields,omitempty"`
	CreatedOn           time.Time          `json:"created_on"`
	UpdatedOn           time.Time          `json:"updated_on"`
	ClosedOn            *time.Time         `json:"closed_on"`
}

func (i IssueSimple) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *IssueSimple) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *IssueSimple) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *IssueSimple) GetProject() IDName {
	if o == nil {
		return IDName{}
	}
	return o.Project
}

func (o *IssueSimple) GetTracker() IDName {
	if o == nil {
		return IDName{}
	}
	return o.Tracker
}

func (o *IssueSimple) GetStatus() IssueStatus {
	if o == nil {
		return IssueStatus{}
	}
	return o.Status
}

func (o *IssueSimple) GetPriority() IDName {
	if o == nil {
		return IDName{}
	}
	return o.Priority
}

func (o *IssueSimple) GetAuthor() IDName {
	if o == nil {
		return IDName{}
	}
	return o.Author
}

func (o *IssueSimple) GetAssignedTo() *IDName {
	if o == nil {
		return nil
	}
	return o.AssignedTo
}

func (o *IssueSimple) GetCategory() *IDName {
	if o == nil {
		return nil
	}
	return o.Category
}

func (o *IssueSimple) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

func (o *IssueSimple) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *IssueSimple) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *IssueSimple) GetDueDate() *string {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *IssueSimple) GetDoneRatio() int64 {
	if o == nil {
		return 0
	}
	return o.DoneRatio
}

func (o *IssueSimple) GetIsPrivate() bool {
	if o == nil {
		return false
	}
	return o.IsPrivate
}

func (o *IssueSimple) GetEstimatedHours() *float64 {
	if o == nil {
		return nil
	}
	return o.EstimatedHours
}

func (o *IssueSimple) GetTotalEstimatedHours() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalEstimatedHours
}

func (o *IssueSimple) GetSpentHours() *float64 {
	if o == nil {
		return nil
	}
	return o.SpentHours
}

func (o *IssueSimple) GetTotalSpentHours() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalSpentHours
}

func (o *IssueSimple) GetCustomFields() []CustomFieldValue {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *IssueSimple) GetCreatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedOn
}

func (o *IssueSimple) GetUpdatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedOn
}

func (o *IssueSimple) GetClosedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.ClosedOn
}
