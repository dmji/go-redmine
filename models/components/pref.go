// Code generated by Speakeasy (https://speakeasy.com).

package components

import (
	"encoding/json"
	"fmt"
)

type CommentsSorting string

const (
	CommentsSortingAsc  CommentsSorting = "asc"
	CommentsSortingDesc CommentsSorting = "desc"
)

func (e CommentsSorting) ToPointer() *CommentsSorting {
	return &e
}

func (e *CommentsSorting) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "asc":
		fallthrough
	case "desc":
		*e = CommentsSorting(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommentsSorting: %v", v)
	}
}

type TextareaFont string

const (
	TextareaFontMonospace    TextareaFont = "monospace"
	TextareaFontProportional TextareaFont = "proportional"
)

func (e TextareaFont) ToPointer() *TextareaFont {
	return &e
}

func (e *TextareaFont) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "monospace":
		fallthrough
	case "proportional":
		*e = TextareaFont(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TextareaFont: %v", v)
	}
}

type HistoryDefaultTab string

const (
	HistoryDefaultTabNotes          HistoryDefaultTab = "notes"
	HistoryDefaultTabHistory        HistoryDefaultTab = "history"
	HistoryDefaultTabProperties     HistoryDefaultTab = "properties"
	HistoryDefaultTabTimeEntries    HistoryDefaultTab = "time_entries"
	HistoryDefaultTabChangesets     HistoryDefaultTab = "changesets"
	HistoryDefaultTabLastTabVisited HistoryDefaultTab = "last_tab_visited"
)

func (e HistoryDefaultTab) ToPointer() *HistoryDefaultTab {
	return &e
}

func (e *HistoryDefaultTab) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "notes":
		fallthrough
	case "history":
		fallthrough
	case "properties":
		fallthrough
	case "time_entries":
		fallthrough
	case "changesets":
		fallthrough
	case "last_tab_visited":
		*e = HistoryDefaultTab(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HistoryDefaultTab: %v", v)
	}
}

type AutoWatchOn string

const (
	AutoWatchOnIssueContributedTo AutoWatchOn = "issue_contributed_to"
)

func (e AutoWatchOn) ToPointer() *AutoWatchOn {
	return &e
}

func (e *AutoWatchOn) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "issue_contributed_to":
		*e = AutoWatchOn(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AutoWatchOn: %v", v)
	}
}

type Pref struct {
	HideMail                      *bool              `json:"hide_mail,omitempty"`
	TimeZone                      *string            `json:"time_zone,omitempty"`
	CommentsSorting               *CommentsSorting   `json:"comments_sorting,omitempty"`
	WarnOnLeavingUnsaved          *bool              `json:"warn_on_leaving_unsaved,omitempty"`
	NoSelfNotified                *bool              `json:"no_self_notified,omitempty"`
	NotifyAboutHighPriorityIssues *bool              `json:"notify_about_high_priority_issues,omitempty"`
	TextareaFont                  *TextareaFont      `json:"textarea_font,omitempty"`
	RecentlyUsedProjects          *int64             `json:"recently_used_projects,omitempty"`
	HistoryDefaultTab             *HistoryDefaultTab `json:"history_default_tab,omitempty"`
	ToolbarLanguageOptions        *string            `json:"toolbar_language_options,omitempty"`
	DefaultIssueQuery             *int64             `json:"default_issue_query,omitempty"`
	DefaultProjectQuery           *int64             `json:"default_project_query,omitempty"`
	AutoWatchOn                   *AutoWatchOn       `json:"auto_watch_on,omitempty"`
}

func (o *Pref) GetHideMail() *bool {
	if o == nil {
		return nil
	}
	return o.HideMail
}

func (o *Pref) GetTimeZone() *string {
	if o == nil {
		return nil
	}
	return o.TimeZone
}

func (o *Pref) GetCommentsSorting() *CommentsSorting {
	if o == nil {
		return nil
	}
	return o.CommentsSorting
}

func (o *Pref) GetWarnOnLeavingUnsaved() *bool {
	if o == nil {
		return nil
	}
	return o.WarnOnLeavingUnsaved
}

func (o *Pref) GetNoSelfNotified() *bool {
	if o == nil {
		return nil
	}
	return o.NoSelfNotified
}

func (o *Pref) GetNotifyAboutHighPriorityIssues() *bool {
	if o == nil {
		return nil
	}
	return o.NotifyAboutHighPriorityIssues
}

func (o *Pref) GetTextareaFont() *TextareaFont {
	if o == nil {
		return nil
	}
	return o.TextareaFont
}

func (o *Pref) GetRecentlyUsedProjects() *int64 {
	if o == nil {
		return nil
	}
	return o.RecentlyUsedProjects
}

func (o *Pref) GetHistoryDefaultTab() *HistoryDefaultTab {
	if o == nil {
		return nil
	}
	return o.HistoryDefaultTab
}

func (o *Pref) GetToolbarLanguageOptions() *string {
	if o == nil {
		return nil
	}
	return o.ToolbarLanguageOptions
}

func (o *Pref) GetDefaultIssueQuery() *int64 {
	if o == nil {
		return nil
	}
	return o.DefaultIssueQuery
}

func (o *Pref) GetDefaultProjectQuery() *int64 {
	if o == nil {
		return nil
	}
	return o.DefaultProjectQuery
}

func (o *Pref) GetAutoWatchOn() *AutoWatchOn {
	if o == nil {
		return nil
	}
	return o.AutoWatchOn
}
