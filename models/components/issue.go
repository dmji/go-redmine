// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/dmji/go-redmine/internal/utils"
	"time"
)

type Children struct {
	ID      int64  `json:"id"`
	Tracker IDName `json:"tracker"`
	Subject string `json:"subject"`
}

func (o *Children) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *Children) GetTracker() IDName {
	if o == nil {
		return IDName{}
	}
	return o.Tracker
}

func (o *Children) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

type Attachments struct {
	ID           int64   `json:"id"`
	Filename     string  `json:"filename"`
	Filesize     int64   `json:"filesize"`
	ContentType  string  `json:"content_type"`
	Description  string  `json:"description"`
	ContentURL   string  `json:"content_url"`
	Author       IDName  `json:"author"`
	CreatedOn    string  `json:"created_on"`
	ThumbnailURL *string `json:"thumbnail_url,omitempty"`
}

func (o *Attachments) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *Attachments) GetFilename() string {
	if o == nil {
		return ""
	}
	return o.Filename
}

func (o *Attachments) GetFilesize() int64 {
	if o == nil {
		return 0
	}
	return o.Filesize
}

func (o *Attachments) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *Attachments) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *Attachments) GetContentURL() string {
	if o == nil {
		return ""
	}
	return o.ContentURL
}

func (o *Attachments) GetAuthor() IDName {
	if o == nil {
		return IDName{}
	}
	return o.Author
}

func (o *Attachments) GetCreatedOn() string {
	if o == nil {
		return ""
	}
	return o.CreatedOn
}

func (o *Attachments) GetThumbnailURL() *string {
	if o == nil {
		return nil
	}
	return o.ThumbnailURL
}

type Relations struct {
	ID           *int64  `json:"id,omitempty"`
	IssueID      *int64  `json:"issue_id,omitempty"`
	IssueToID    *int64  `json:"issue_to_id,omitempty"`
	RelationType *string `json:"relation_type,omitempty"`
	Delay        *int64  `json:"delay,omitempty"`
}

func (o *Relations) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Relations) GetIssueID() *int64 {
	if o == nil {
		return nil
	}
	return o.IssueID
}

func (o *Relations) GetIssueToID() *int64 {
	if o == nil {
		return nil
	}
	return o.IssueToID
}

func (o *Relations) GetRelationType() *string {
	if o == nil {
		return nil
	}
	return o.RelationType
}

func (o *Relations) GetDelay() *int64 {
	if o == nil {
		return nil
	}
	return o.Delay
}

type Details struct {
	Property string  `json:"property"`
	Name     string  `json:"name"`
	OldValue *string `json:"old_value"`
	NewValue *string `json:"new_value"`
}

func (o *Details) GetProperty() string {
	if o == nil {
		return ""
	}
	return o.Property
}

func (o *Details) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Details) GetOldValue() *string {
	if o == nil {
		return nil
	}
	return o.OldValue
}

func (o *Details) GetNewValue() *string {
	if o == nil {
		return nil
	}
	return o.NewValue
}

type Journals struct {
	ID           int64     `json:"id"`
	User         IDName    `json:"user"`
	Notes        string    `json:"notes"`
	CreatedOn    time.Time `json:"created_on"`
	PrivateNotes bool      `json:"private_notes"`
	Details      []Details `json:"details"`
}

func (j Journals) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(j, "", false)
}

func (j *Journals) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &j, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Journals) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *Journals) GetUser() IDName {
	if o == nil {
		return IDName{}
	}
	return o.User
}

func (o *Journals) GetNotes() string {
	if o == nil {
		return ""
	}
	return o.Notes
}

func (o *Journals) GetCreatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedOn
}

func (o *Journals) GetPrivateNotes() bool {
	if o == nil {
		return false
	}
	return o.PrivateNotes
}

func (o *Journals) GetDetails() []Details {
	if o == nil {
		return []Details{}
	}
	return o.Details
}

type Issue struct {
	ID                  int64              `json:"id"`
	Project             IDName             `json:"project"`
	Tracker             IDName             `json:"tracker"`
	Status              IssueStatus        `json:"status"`
	Priority            IDName             `json:"priority"`
	Author              IDName             `json:"author"`
	AssignedTo          *IDName            `json:"assigned_to,omitempty"`
	Category            *IDName            `json:"category,omitempty"`
	Subject             string             `json:"subject"`
	Description         *string            `json:"description"`
	StartDate           *string            `json:"start_date"`
	DueDate             *string            `json:"due_date"`
	DoneRatio           int64              `json:"done_ratio"`
	IsPrivate           bool               `json:"is_private"`
	EstimatedHours      *float64           `json:"estimated_hours"`
	TotalEstimatedHours *float64           `json:"total_estimated_hours"`
	SpentHours          *float64           `json:"spent_hours,omitempty"`
	TotalSpentHours     *float64           `json:"total_spent_hours,omitempty"`
	CustomFields        []CustomFieldValue `json:"custom_fields,omitempty"`
	CreatedOn           time.Time          `json:"created_on"`
	UpdatedOn           time.Time          `json:"updated_on"`
	ClosedOn            *time.Time         `json:"closed_on"`
	Changesets          []string           `json:"changesets,omitempty"`
	Children            []Children         `json:"children,omitempty"`
	Attachments         []Attachments      `json:"attachments,omitempty"`
	Relations           []Relations        `json:"relations,omitempty"`
	Journals            []Journals         `json:"journals,omitempty"`
	Watchers            []IDName           `json:"watchers,omitempty"`
	AllowedStatuses     []IssueStatus      `json:"allowed_statuses,omitempty"`
}

func (i Issue) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *Issue) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Issue) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *Issue) GetProject() IDName {
	if o == nil {
		return IDName{}
	}
	return o.Project
}

func (o *Issue) GetTracker() IDName {
	if o == nil {
		return IDName{}
	}
	return o.Tracker
}

func (o *Issue) GetStatus() IssueStatus {
	if o == nil {
		return IssueStatus{}
	}
	return o.Status
}

func (o *Issue) GetPriority() IDName {
	if o == nil {
		return IDName{}
	}
	return o.Priority
}

func (o *Issue) GetAuthor() IDName {
	if o == nil {
		return IDName{}
	}
	return o.Author
}

func (o *Issue) GetAssignedTo() *IDName {
	if o == nil {
		return nil
	}
	return o.AssignedTo
}

func (o *Issue) GetCategory() *IDName {
	if o == nil {
		return nil
	}
	return o.Category
}

func (o *Issue) GetSubject() string {
	if o == nil {
		return ""
	}
	return o.Subject
}

func (o *Issue) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Issue) GetStartDate() *string {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *Issue) GetDueDate() *string {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *Issue) GetDoneRatio() int64 {
	if o == nil {
		return 0
	}
	return o.DoneRatio
}

func (o *Issue) GetIsPrivate() bool {
	if o == nil {
		return false
	}
	return o.IsPrivate
}

func (o *Issue) GetEstimatedHours() *float64 {
	if o == nil {
		return nil
	}
	return o.EstimatedHours
}

func (o *Issue) GetTotalEstimatedHours() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalEstimatedHours
}

func (o *Issue) GetSpentHours() *float64 {
	if o == nil {
		return nil
	}
	return o.SpentHours
}

func (o *Issue) GetTotalSpentHours() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalSpentHours
}

func (o *Issue) GetCustomFields() []CustomFieldValue {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *Issue) GetCreatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedOn
}

func (o *Issue) GetUpdatedOn() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedOn
}

func (o *Issue) GetClosedOn() *time.Time {
	if o == nil {
		return nil
	}
	return o.ClosedOn
}

func (o *Issue) GetChangesets() []string {
	if o == nil {
		return nil
	}
	return o.Changesets
}

func (o *Issue) GetChildren() []Children {
	if o == nil {
		return nil
	}
	return o.Children
}

func (o *Issue) GetAttachments() []Attachments {
	if o == nil {
		return nil
	}
	return o.Attachments
}

func (o *Issue) GetRelations() []Relations {
	if o == nil {
		return nil
	}
	return o.Relations
}

func (o *Issue) GetJournals() []Journals {
	if o == nil {
		return nil
	}
	return o.Journals
}

func (o *Issue) GetWatchers() []IDName {
	if o == nil {
		return nil
	}
	return o.Watchers
}

func (o *Issue) GetAllowedStatuses() []IssueStatus {
	if o == nil {
		return nil
	}
	return o.AllowedStatuses
}
