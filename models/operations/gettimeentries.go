// Code generated by Speakeasy (https://speakeasy.com).

package operations

import (
	"github.com/dmji/go-redmine/internal/utils"
	"github.com/dmji/go-redmine/models/components"
	"github.com/dmji/go-redmine/types"
)

type GetTimeEntriesRequest struct {
	Format              components.Format          `pathParam:"style=simple,explode=false,name=format"`
	Offset              *int64                     `queryParam:"style=form,explode=true,name=offset"`
	Limit               *int64                     `queryParam:"style=form,explode=true,name=limit"`
	Nometa              *components.Nometa         `queryParam:"style=form,explode=true,name=nometa"`
	XRedmineSwitchUser  *string                    `header:"style=simple,explode=false,name=X-Redmine-Switch-User"`
	XRedmineNometa      *components.XRedmineNometa `header:"style=simple,explode=false,name=X-Redmine-Nometa"`
	UserID              []string                   `queryParam:"style=form,explode=false,name=user_id"`
	ProjectID           []string                   `queryParam:"style=form,explode=false,name=project_id"`
	SpentOn             *types.Date                `queryParam:"style=form,explode=true,name=spent_on"`
	From                *types.Date                `queryParam:"style=form,explode=true,name=from"`
	To                  *types.Date                `queryParam:"style=form,explode=true,name=to"`
	SubprojectID        []string                   `queryParam:"style=form,explode=false,name=subproject_id"`
	IssueID             []string                   `queryParam:"style=form,explode=false,name=issue_id"`
	IssueTrackerID      []string                   `queryParam:"style=form,explode=false,name=issue.tracker_id"`
	IssueStatusID       []string                   `queryParam:"style=form,explode=false,name=issue.status_id"`
	IssueFixedVersionID []string                   `queryParam:"style=form,explode=false,name=issue.fixed_version_id"`
	IssueCategoryID     []string                   `queryParam:"style=form,explode=false,name=issue.category_id"`
	AuthorID            []string                   `queryParam:"style=form,explode=false,name=author_id"`
	ActivityID          []string                   `queryParam:"style=form,explode=false,name=activity_id"`
	ProjectStatus       []string                   `queryParam:"style=form,explode=false,name=project.status"`
	Comments            *string                    `queryParam:"style=form,explode=true,name=comments"`
	Hours               *string                    `queryParam:"style=form,explode=true,name=hours"`
	Sort                *string                    `queryParam:"style=form,explode=true,name=sort"`
}

func (g GetTimeEntriesRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetTimeEntriesRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetTimeEntriesRequest) GetFormat() components.Format {
	if o == nil {
		return components.Format("")
	}
	return o.Format
}

func (o *GetTimeEntriesRequest) GetOffset() *int64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetTimeEntriesRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetTimeEntriesRequest) GetNometa() *components.Nometa {
	if o == nil {
		return nil
	}
	return o.Nometa
}

func (o *GetTimeEntriesRequest) GetXRedmineSwitchUser() *string {
	if o == nil {
		return nil
	}
	return o.XRedmineSwitchUser
}

func (o *GetTimeEntriesRequest) GetXRedmineNometa() *components.XRedmineNometa {
	if o == nil {
		return nil
	}
	return o.XRedmineNometa
}

func (o *GetTimeEntriesRequest) GetUserID() []string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *GetTimeEntriesRequest) GetProjectID() []string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetTimeEntriesRequest) GetSpentOn() *types.Date {
	if o == nil {
		return nil
	}
	return o.SpentOn
}

func (o *GetTimeEntriesRequest) GetFrom() *types.Date {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *GetTimeEntriesRequest) GetTo() *types.Date {
	if o == nil {
		return nil
	}
	return o.To
}

func (o *GetTimeEntriesRequest) GetSubprojectID() []string {
	if o == nil {
		return nil
	}
	return o.SubprojectID
}

func (o *GetTimeEntriesRequest) GetIssueID() []string {
	if o == nil {
		return nil
	}
	return o.IssueID
}

func (o *GetTimeEntriesRequest) GetIssueTrackerID() []string {
	if o == nil {
		return nil
	}
	return o.IssueTrackerID
}

func (o *GetTimeEntriesRequest) GetIssueStatusID() []string {
	if o == nil {
		return nil
	}
	return o.IssueStatusID
}

func (o *GetTimeEntriesRequest) GetIssueFixedVersionID() []string {
	if o == nil {
		return nil
	}
	return o.IssueFixedVersionID
}

func (o *GetTimeEntriesRequest) GetIssueCategoryID() []string {
	if o == nil {
		return nil
	}
	return o.IssueCategoryID
}

func (o *GetTimeEntriesRequest) GetAuthorID() []string {
	if o == nil {
		return nil
	}
	return o.AuthorID
}

func (o *GetTimeEntriesRequest) GetActivityID() []string {
	if o == nil {
		return nil
	}
	return o.ActivityID
}

func (o *GetTimeEntriesRequest) GetProjectStatus() []string {
	if o == nil {
		return nil
	}
	return o.ProjectStatus
}

func (o *GetTimeEntriesRequest) GetComments() *string {
	if o == nil {
		return nil
	}
	return o.Comments
}

func (o *GetTimeEntriesRequest) GetHours() *string {
	if o == nil {
		return nil
	}
	return o.Hours
}

func (o *GetTimeEntriesRequest) GetSort() *string {
	if o == nil {
		return nil
	}
	return o.Sort
}

type GetTimeEntriesResponseBody struct {
	TimeEntries []components.TimeEntry `json:"time_entries"`
	TotalCount  *int64                 `json:"total_count,omitempty"`
	Offset      *int64                 `json:"offset,omitempty"`
	Limit       *int64                 `json:"limit,omitempty"`
}

func (o *GetTimeEntriesResponseBody) GetTimeEntries() []components.TimeEntry {
	if o == nil {
		return []components.TimeEntry{}
	}
	return o.TimeEntries
}

func (o *GetTimeEntriesResponseBody) GetTotalCount() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalCount
}

func (o *GetTimeEntriesResponseBody) GetOffset() *int64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetTimeEntriesResponseBody) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

type GetTimeEntriesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetTimeEntriesResponseBody
}

func (o *GetTimeEntriesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetTimeEntriesResponse) GetObject() *GetTimeEntriesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
