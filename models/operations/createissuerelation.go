// Code generated by Speakeasy (https://speakeasy.com).

package operations

import (
	"encoding/json"
	"fmt"

	"github.com/dmji/go-redmine/models/components"
)

type RelationType string

const (
	RelationTypeRelates    RelationType = "relates"
	RelationTypeDuplicates RelationType = "duplicates"
	RelationTypeDuplicated RelationType = "duplicated"
	RelationTypeBlocks     RelationType = "blocks"
	RelationTypeBlocked    RelationType = "blocked"
	RelationTypePrecedes   RelationType = "precedes"
	RelationTypeFollows    RelationType = "follows"
	RelationTypeCopiedTo   RelationType = "copied_to"
	RelationTypeCopiedFrom RelationType = "copied_from"
)

func (e RelationType) ToPointer() *RelationType {
	return &e
}

func (e *RelationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "relates":
		fallthrough
	case "duplicates":
		fallthrough
	case "duplicated":
		fallthrough
	case "blocks":
		fallthrough
	case "blocked":
		fallthrough
	case "precedes":
		fallthrough
	case "follows":
		fallthrough
	case "copied_to":
		fallthrough
	case "copied_from":
		*e = RelationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RelationType: %v", v)
	}
}

type Relation struct {
	IssueToID    int64        `json:"issue_to_id"`
	RelationType RelationType `json:"relation_type"`
	Delay        *int64       `json:"delay,omitempty"`
}

func (o *Relation) GetIssueToID() int64 {
	if o == nil {
		return 0
	}
	return o.IssueToID
}

func (o *Relation) GetRelationType() RelationType {
	if o == nil {
		return RelationType("")
	}
	return o.RelationType
}

func (o *Relation) GetDelay() *int64 {
	if o == nil {
		return nil
	}
	return o.Delay
}

type CreateIssueRelationRequestBody struct {
	Relation Relation `json:"relation"`
}

func (o *CreateIssueRelationRequestBody) GetRelation() Relation {
	if o == nil {
		return Relation{}
	}
	return o.Relation
}

type CreateIssueRelationRequest struct {
	Format             components.Format               `pathParam:"style=simple,explode=false,name=format"`
	IssueID            int64                           `pathParam:"style=simple,explode=false,name=issue_id"`
	XRedmineSwitchUser *string                         `header:"style=simple,explode=false,name=X-Redmine-Switch-User"`
	RequestBody        *CreateIssueRelationRequestBody `request:"mediaType=application/json"`
}

func (o *CreateIssueRelationRequest) GetFormat() components.Format {
	if o == nil {
		return components.Format("")
	}
	return o.Format
}

func (o *CreateIssueRelationRequest) GetIssueID() int64 {
	if o == nil {
		return 0
	}
	return o.IssueID
}

func (o *CreateIssueRelationRequest) GetXRedmineSwitchUser() *string {
	if o == nil {
		return nil
	}
	return o.XRedmineSwitchUser
}

func (o *CreateIssueRelationRequest) GetRequestBody() *CreateIssueRelationRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type CreateIssueRelationResponseBody struct {
	Relation components.IssueRelation `json:"relation"`
}

func (o *CreateIssueRelationResponseBody) GetRelation() components.IssueRelation {
	if o == nil {
		return components.IssueRelation{}
	}
	return o.Relation
}

type CreateIssueRelationResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *CreateIssueRelationResponseBody
}

func (o *CreateIssueRelationResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateIssueRelationResponse) GetObject() *CreateIssueRelationResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
