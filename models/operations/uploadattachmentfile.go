// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/dmji/go-redmine/models/components"
)

type UploadAttachmentFileRequest struct {
	Format             components.Format `pathParam:"style=simple,explode=false,name=format"`
	XRedmineSwitchUser *string           `header:"style=simple,explode=false,name=X-Redmine-Switch-User"`
	Filename           *string           `queryParam:"style=form,explode=true,name=filename"`
	// This field accepts []byte data or io.Reader implementations, such as *os.File.
	RequestBody *any `request:"mediaType=application/octet-stream"`
}

func (o *UploadAttachmentFileRequest) GetFormat() components.Format {
	if o == nil {
		return components.Format("")
	}
	return o.Format
}

func (o *UploadAttachmentFileRequest) GetXRedmineSwitchUser() *string {
	if o == nil {
		return nil
	}
	return o.XRedmineSwitchUser
}

func (o *UploadAttachmentFileRequest) GetFilename() *string {
	if o == nil {
		return nil
	}
	return o.Filename
}

func (o *UploadAttachmentFileRequest) GetRequestBody() *any {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type Upload struct {
	ID    int64  `json:"id"`
	Token string `json:"token"`
}

func (o *Upload) GetID() int64 {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *Upload) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

type UploadAttachmentFileResponseBody struct {
	Upload Upload `json:"upload"`
}

func (o *UploadAttachmentFileResponseBody) GetUpload() Upload {
	if o == nil {
		return Upload{}
	}
	return o.Upload
}

type UploadAttachmentFileResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UploadAttachmentFileResponseBody
}

func (o *UploadAttachmentFileResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UploadAttachmentFileResponse) GetObject() *UploadAttachmentFileResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
