// Code generated by Speakeasy (https://speakeasy.com).

package operations

import (
	"encoding/json"
	"fmt"

	"github.com/dmji/go-redmine/models/components"
)

type MailNotification string

const (
	MailNotificationAll          MailNotification = "all"
	MailNotificationSelected     MailNotification = "selected"
	MailNotificationOnlyMyEvents MailNotification = "only_my_events"
	MailNotificationOnlyAssigned MailNotification = "only_assigned"
	MailNotificationOnlyOwner    MailNotification = "only_owner"
	MailNotificationNone         MailNotification = "none"
)

func (e MailNotification) ToPointer() *MailNotification {
	return &e
}

func (e *MailNotification) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "selected":
		fallthrough
	case "only_my_events":
		fallthrough
	case "only_assigned":
		fallthrough
	case "only_owner":
		fallthrough
	case "none":
		*e = MailNotification(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MailNotification: %v", v)
	}
}

type User struct {
	Login              string                    `json:"login"`
	Admin              *bool                     `json:"admin,omitempty"`
	Password           *string                   `json:"password,omitempty"`
	Firstname          string                    `json:"firstname"`
	Lastname           string                    `json:"lastname"`
	Mail               string                    `json:"mail"`
	Language           *string                   `json:"language,omitempty"`
	AuthSourceID       *int64                    `json:"auth_source_id,omitempty"`
	MailNotification   *MailNotification         `json:"mail_notification,omitempty"`
	NotifiedProjectIds []int64                   `json:"notified_project_ids,omitempty"`
	MustChangePasswd   *bool                     `json:"must_change_passwd,omitempty"`
	GeneratePassword   *bool                     `json:"generate_password,omitempty"`
	Status             *int64                    `json:"status,omitempty"`
	CustomFields       []components.CustomFields `json:"custom_fields,omitempty"`
	CustomFieldValues  map[string]any            `json:"custom_field_values,omitempty"`
}

func (o *User) GetLogin() string {
	if o == nil {
		return ""
	}
	return o.Login
}

func (o *User) GetAdmin() *bool {
	if o == nil {
		return nil
	}
	return o.Admin
}

func (o *User) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *User) GetFirstname() string {
	if o == nil {
		return ""
	}
	return o.Firstname
}

func (o *User) GetLastname() string {
	if o == nil {
		return ""
	}
	return o.Lastname
}

func (o *User) GetMail() string {
	if o == nil {
		return ""
	}
	return o.Mail
}

func (o *User) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *User) GetAuthSourceID() *int64 {
	if o == nil {
		return nil
	}
	return o.AuthSourceID
}

func (o *User) GetMailNotification() *MailNotification {
	if o == nil {
		return nil
	}
	return o.MailNotification
}

func (o *User) GetNotifiedProjectIds() []int64 {
	if o == nil {
		return nil
	}
	return o.NotifiedProjectIds
}

func (o *User) GetMustChangePasswd() *bool {
	if o == nil {
		return nil
	}
	return o.MustChangePasswd
}

func (o *User) GetGeneratePassword() *bool {
	if o == nil {
		return nil
	}
	return o.GeneratePassword
}

func (o *User) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *User) GetCustomFields() []components.CustomFields {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *User) GetCustomFieldValues() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomFieldValues
}

type CreateUserRequestBody struct {
	User            User             `json:"user"`
	SendInformation *bool            `json:"send_information,omitempty"`
	Pref            *components.Pref `json:"pref,omitempty"`
}

func (o *CreateUserRequestBody) GetUser() User {
	if o == nil {
		return User{}
	}
	return o.User
}

func (o *CreateUserRequestBody) GetSendInformation() *bool {
	if o == nil {
		return nil
	}
	return o.SendInformation
}

func (o *CreateUserRequestBody) GetPref() *components.Pref {
	if o == nil {
		return nil
	}
	return o.Pref
}

type CreateUserRequest struct {
	Format             components.Format      `pathParam:"style=simple,explode=false,name=format"`
	XRedmineSwitchUser *string                `header:"style=simple,explode=false,name=X-Redmine-Switch-User"`
	RequestBody        *CreateUserRequestBody `request:"mediaType=application/json"`
}

func (o *CreateUserRequest) GetFormat() components.Format {
	if o == nil {
		return components.Format("")
	}
	return o.Format
}

func (o *CreateUserRequest) GetXRedmineSwitchUser() *string {
	if o == nil {
		return nil
	}
	return o.XRedmineSwitchUser
}

func (o *CreateUserRequest) GetRequestBody() *CreateUserRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type CreateUserResponseBody struct {
	User *components.User `json:"user,omitempty"`
}

func (o *CreateUserResponseBody) GetUser() *components.User {
	if o == nil {
		return nil
	}
	return o.User
}

type CreateUserResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *CreateUserResponseBody
}

func (o *CreateUserResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateUserResponse) GetObject() *CreateUserResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
