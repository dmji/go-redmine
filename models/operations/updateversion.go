// Code generated by Speakeasy (https://speakeasy.com).

package operations

import (
	"encoding/json"
	"fmt"

	"github.com/dmji/go-redmine/internal/utils"
	"github.com/dmji/go-redmine/models/components"
	"github.com/dmji/go-redmine/types"
)

type UpdateVersionStatus string

const (
	UpdateVersionStatusOpen   UpdateVersionStatus = "open"
	UpdateVersionStatusLocked UpdateVersionStatus = "locked"
	UpdateVersionStatusClosed UpdateVersionStatus = "closed"
)

func (e UpdateVersionStatus) ToPointer() *UpdateVersionStatus {
	return &e
}

func (e *UpdateVersionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "locked":
		fallthrough
	case "closed":
		*e = UpdateVersionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateVersionStatus: %v", v)
	}
}

type UpdateVersionSharing string

const (
	UpdateVersionSharingNone        UpdateVersionSharing = "none"
	UpdateVersionSharingDescendants UpdateVersionSharing = "descendants"
	UpdateVersionSharingHierarchy   UpdateVersionSharing = "hierarchy"
	UpdateVersionSharingTree        UpdateVersionSharing = "tree"
	UpdateVersionSharingSystem      UpdateVersionSharing = "system"
)

func (e UpdateVersionSharing) ToPointer() *UpdateVersionSharing {
	return &e
}

func (e *UpdateVersionSharing) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "descendants":
		fallthrough
	case "hierarchy":
		fallthrough
	case "tree":
		fallthrough
	case "system":
		*e = UpdateVersionSharing(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateVersionSharing: %v", v)
	}
}

type UpdateVersionVersion struct {
	Name              *string                   `json:"name,omitempty"`
	Status            *UpdateVersionStatus      `json:"status,omitempty"`
	Sharing           *UpdateVersionSharing     `json:"sharing,omitempty"`
	DueDate           *types.Date               `json:"due_date,omitempty"`
	Description       *string                   `json:"description,omitempty"`
	WikiPageTitle     *string                   `json:"wiki_page_title,omitempty"`
	CustomFields      []components.CustomFields `json:"custom_fields,omitempty"`
	CustomFieldValues map[string]any            `json:"custom_field_values,omitempty"`
}

func (u UpdateVersionVersion) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateVersionVersion) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateVersionVersion) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateVersionVersion) GetStatus() *UpdateVersionStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateVersionVersion) GetSharing() *UpdateVersionSharing {
	if o == nil {
		return nil
	}
	return o.Sharing
}

func (o *UpdateVersionVersion) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *UpdateVersionVersion) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateVersionVersion) GetWikiPageTitle() *string {
	if o == nil {
		return nil
	}
	return o.WikiPageTitle
}

func (o *UpdateVersionVersion) GetCustomFields() []components.CustomFields {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *UpdateVersionVersion) GetCustomFieldValues() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomFieldValues
}

type UpdateVersionRequestBody struct {
	Version *UpdateVersionVersion `json:"version,omitempty"`
}

func (o *UpdateVersionRequestBody) GetVersion() *UpdateVersionVersion {
	if o == nil {
		return nil
	}
	return o.Version
}

type UpdateVersionRequest struct {
	Format             components.Format         `pathParam:"style=simple,explode=false,name=format"`
	VersionID          int64                     `pathParam:"style=simple,explode=false,name=version_id"`
	XRedmineSwitchUser *string                   `header:"style=simple,explode=false,name=X-Redmine-Switch-User"`
	RequestBody        *UpdateVersionRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateVersionRequest) GetFormat() components.Format {
	if o == nil {
		return components.Format("")
	}
	return o.Format
}

func (o *UpdateVersionRequest) GetVersionID() int64 {
	if o == nil {
		return 0
	}
	return o.VersionID
}

func (o *UpdateVersionRequest) GetXRedmineSwitchUser() *string {
	if o == nil {
		return nil
	}
	return o.XRedmineSwitchUser
}

func (o *UpdateVersionRequest) GetRequestBody() *UpdateVersionRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateVersionResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *UpdateVersionResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
