// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/dmji/go-redmine/models/components"
)

type UpdateProjectProject struct {
	Name                *string                   `json:"name,omitempty"`
	Description         *string                   `json:"description,omitempty"`
	Homepage            *string                   `json:"homepage,omitempty"`
	IsPublic            *bool                     `json:"is_public,omitempty"`
	ParentID            *int64                    `json:"parent_id,omitempty"`
	InheritMembers      *bool                     `json:"inherit_members,omitempty"`
	DefaultAssignedToID *int64                    `json:"default_assigned_to_id,omitempty"`
	DefaultVersionID    *int64                    `json:"default_version_id,omitempty"`
	TrackerIds          []int64                   `json:"tracker_ids,omitempty"`
	EnabledModuleNames  []string                  `json:"enabled_module_names,omitempty"`
	IssueCustomFieldIds []int64                   `json:"issue_custom_field_ids,omitempty"`
	CustomFields        []components.CustomFields `json:"custom_fields,omitempty"`
	CustomFieldValues   map[string]any            `json:"custom_field_values,omitempty"`
}

func (o *UpdateProjectProject) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateProjectProject) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateProjectProject) GetHomepage() *string {
	if o == nil {
		return nil
	}
	return o.Homepage
}

func (o *UpdateProjectProject) GetIsPublic() *bool {
	if o == nil {
		return nil
	}
	return o.IsPublic
}

func (o *UpdateProjectProject) GetParentID() *int64 {
	if o == nil {
		return nil
	}
	return o.ParentID
}

func (o *UpdateProjectProject) GetInheritMembers() *bool {
	if o == nil {
		return nil
	}
	return o.InheritMembers
}

func (o *UpdateProjectProject) GetDefaultAssignedToID() *int64 {
	if o == nil {
		return nil
	}
	return o.DefaultAssignedToID
}

func (o *UpdateProjectProject) GetDefaultVersionID() *int64 {
	if o == nil {
		return nil
	}
	return o.DefaultVersionID
}

func (o *UpdateProjectProject) GetTrackerIds() []int64 {
	if o == nil {
		return nil
	}
	return o.TrackerIds
}

func (o *UpdateProjectProject) GetEnabledModuleNames() []string {
	if o == nil {
		return nil
	}
	return o.EnabledModuleNames
}

func (o *UpdateProjectProject) GetIssueCustomFieldIds() []int64 {
	if o == nil {
		return nil
	}
	return o.IssueCustomFieldIds
}

func (o *UpdateProjectProject) GetCustomFields() []components.CustomFields {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *UpdateProjectProject) GetCustomFieldValues() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomFieldValues
}

type UpdateProjectRequestBody struct {
	Project *UpdateProjectProject `json:"project,omitempty"`
}

func (o *UpdateProjectRequestBody) GetProject() *UpdateProjectProject {
	if o == nil {
		return nil
	}
	return o.Project
}

type UpdateProjectRequest struct {
	Format             components.Format         `pathParam:"style=simple,explode=false,name=format"`
	ProjectID          int64                     `pathParam:"style=simple,explode=false,name=project_id"`
	XRedmineSwitchUser *string                   `header:"style=simple,explode=false,name=X-Redmine-Switch-User"`
	RequestBody        *UpdateProjectRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateProjectRequest) GetFormat() components.Format {
	if o == nil {
		return components.Format("")
	}
	return o.Format
}

func (o *UpdateProjectRequest) GetProjectID() int64 {
	if o == nil {
		return 0
	}
	return o.ProjectID
}

func (o *UpdateProjectRequest) GetXRedmineSwitchUser() *string {
	if o == nil {
		return nil
	}
	return o.XRedmineSwitchUser
}

func (o *UpdateProjectRequest) GetRequestBody() *UpdateProjectRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateProjectResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *UpdateProjectResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
