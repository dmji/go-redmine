// Code generated by Speakeasy (https://speakeasy.com).

package operations

import (
	"encoding/json"
	"fmt"

	"github.com/dmji/go-redmine/models/components"
)

type GetUserQueryParamInclude string

const (
	GetUserQueryParamIncludeMemberships GetUserQueryParamInclude = "memberships"
	GetUserQueryParamIncludeGroups      GetUserQueryParamInclude = "groups"
)

func (e GetUserQueryParamInclude) ToPointer() *GetUserQueryParamInclude {
	return &e
}

func (e *GetUserQueryParamInclude) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "memberships":
		fallthrough
	case "groups":
		*e = GetUserQueryParamInclude(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUserQueryParamInclude: %v", v)
	}
}

type GetUserRequest struct {
	Format             components.Format          `pathParam:"style=simple,explode=false,name=format"`
	UserID             int64                      `pathParam:"style=simple,explode=false,name=user_id"`
	XRedmineSwitchUser *string                    `header:"style=simple,explode=false,name=X-Redmine-Switch-User"`
	Include            []GetUserQueryParamInclude `queryParam:"style=form,explode=false,name=include"`
}

func (o *GetUserRequest) GetFormat() components.Format {
	if o == nil {
		return components.Format("")
	}
	return o.Format
}

func (o *GetUserRequest) GetUserID() int64 {
	if o == nil {
		return 0
	}
	return o.UserID
}

func (o *GetUserRequest) GetXRedmineSwitchUser() *string {
	if o == nil {
		return nil
	}
	return o.XRedmineSwitchUser
}

func (o *GetUserRequest) GetInclude() []GetUserQueryParamInclude {
	if o == nil {
		return nil
	}
	return o.Include
}

type GetUserResponseBody struct {
	User components.User `json:"user"`
}

func (o *GetUserResponseBody) GetUser() components.User {
	if o == nil {
		return components.User{}
	}
	return o.User
}

type GetUserResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetUserResponseBody
}

func (o *GetUserResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetUserResponse) GetObject() *GetUserResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
