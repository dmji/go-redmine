// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/dmji/go-redmine/models/components"
)

type UpdateMyAccountMailNotification string

const (
	UpdateMyAccountMailNotificationAll          UpdateMyAccountMailNotification = "all"
	UpdateMyAccountMailNotificationSelected     UpdateMyAccountMailNotification = "selected"
	UpdateMyAccountMailNotificationOnlyMyEvents UpdateMyAccountMailNotification = "only_my_events"
	UpdateMyAccountMailNotificationOnlyAssigned UpdateMyAccountMailNotification = "only_assigned"
	UpdateMyAccountMailNotificationOnlyOwner    UpdateMyAccountMailNotification = "only_owner"
	UpdateMyAccountMailNotificationNone         UpdateMyAccountMailNotification = "none"
)

func (e UpdateMyAccountMailNotification) ToPointer() *UpdateMyAccountMailNotification {
	return &e
}
func (e *UpdateMyAccountMailNotification) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "selected":
		fallthrough
	case "only_my_events":
		fallthrough
	case "only_assigned":
		fallthrough
	case "only_owner":
		fallthrough
	case "none":
		*e = UpdateMyAccountMailNotification(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateMyAccountMailNotification: %v", v)
	}
}

type UpdateMyAccountUser struct {
	Login              *string                          `json:"login,omitempty"`
	Admin              *bool                            `json:"admin,omitempty"`
	Password           *string                          `json:"password,omitempty"`
	Firstname          *string                          `json:"firstname,omitempty"`
	Lastname           *string                          `json:"lastname,omitempty"`
	Mail               *string                          `json:"mail,omitempty"`
	Language           *string                          `json:"language,omitempty"`
	AuthSourceID       *int64                           `json:"auth_source_id,omitempty"`
	MailNotification   *UpdateMyAccountMailNotification `json:"mail_notification,omitempty"`
	NotifiedProjectIds []int64                          `json:"notified_project_ids,omitempty"`
	MustChangePasswd   *bool                            `json:"must_change_passwd,omitempty"`
	GeneratePassword   *bool                            `json:"generate_password,omitempty"`
	Status             *int64                           `json:"status,omitempty"`
	CustomFields       []components.CustomFields        `json:"custom_fields,omitempty"`
	CustomFieldValues  map[string]any                   `json:"custom_field_values,omitempty"`
	GroupIds           []int64                          `json:"group_ids,omitempty"`
}

func (o *UpdateMyAccountUser) GetLogin() *string {
	if o == nil {
		return nil
	}
	return o.Login
}

func (o *UpdateMyAccountUser) GetAdmin() *bool {
	if o == nil {
		return nil
	}
	return o.Admin
}

func (o *UpdateMyAccountUser) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *UpdateMyAccountUser) GetFirstname() *string {
	if o == nil {
		return nil
	}
	return o.Firstname
}

func (o *UpdateMyAccountUser) GetLastname() *string {
	if o == nil {
		return nil
	}
	return o.Lastname
}

func (o *UpdateMyAccountUser) GetMail() *string {
	if o == nil {
		return nil
	}
	return o.Mail
}

func (o *UpdateMyAccountUser) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *UpdateMyAccountUser) GetAuthSourceID() *int64 {
	if o == nil {
		return nil
	}
	return o.AuthSourceID
}

func (o *UpdateMyAccountUser) GetMailNotification() *UpdateMyAccountMailNotification {
	if o == nil {
		return nil
	}
	return o.MailNotification
}

func (o *UpdateMyAccountUser) GetNotifiedProjectIds() []int64 {
	if o == nil {
		return nil
	}
	return o.NotifiedProjectIds
}

func (o *UpdateMyAccountUser) GetMustChangePasswd() *bool {
	if o == nil {
		return nil
	}
	return o.MustChangePasswd
}

func (o *UpdateMyAccountUser) GetGeneratePassword() *bool {
	if o == nil {
		return nil
	}
	return o.GeneratePassword
}

func (o *UpdateMyAccountUser) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateMyAccountUser) GetCustomFields() []components.CustomFields {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *UpdateMyAccountUser) GetCustomFieldValues() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomFieldValues
}

func (o *UpdateMyAccountUser) GetGroupIds() []int64 {
	if o == nil {
		return nil
	}
	return o.GroupIds
}

type UpdateMyAccountRequestBody struct {
	User *UpdateMyAccountUser `json:"user,omitempty"`
	Pref *components.Pref     `json:"pref,omitempty"`
}

func (o *UpdateMyAccountRequestBody) GetUser() *UpdateMyAccountUser {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *UpdateMyAccountRequestBody) GetPref() *components.Pref {
	if o == nil {
		return nil
	}
	return o.Pref
}

type UpdateMyAccountRequest struct {
	Format             components.Format           `pathParam:"style=simple,explode=false,name=format"`
	XRedmineSwitchUser *string                     `header:"style=simple,explode=false,name=X-Redmine-Switch-User"`
	RequestBody        *UpdateMyAccountRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateMyAccountRequest) GetFormat() components.Format {
	if o == nil {
		return components.Format("")
	}
	return o.Format
}

func (o *UpdateMyAccountRequest) GetXRedmineSwitchUser() *string {
	if o == nil {
		return nil
	}
	return o.XRedmineSwitchUser
}

func (o *UpdateMyAccountRequest) GetRequestBody() *UpdateMyAccountRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateMyAccountResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *UpdateMyAccountResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
