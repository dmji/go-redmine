// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/dmji/go-redmine/models/components"
)

type File struct {
	Token       string  `json:"token"`
	VersionID   *int64  `json:"version_id,omitempty"`
	Filename    *string `json:"filename,omitempty"`
	Description *string `json:"description,omitempty"`
	ContentType *string `json:"content_type,omitempty"`
}

func (o *File) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *File) GetVersionID() *int64 {
	if o == nil {
		return nil
	}
	return o.VersionID
}

func (o *File) GetFilename() *string {
	if o == nil {
		return nil
	}
	return o.Filename
}

func (o *File) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *File) GetContentType() *string {
	if o == nil {
		return nil
	}
	return o.ContentType
}

type CreateFileRequestBody struct {
	File File `json:"file"`
}

func (o *CreateFileRequestBody) GetFile() File {
	if o == nil {
		return File{}
	}
	return o.File
}

type CreateFileRequest struct {
	Format             components.Format      `pathParam:"style=simple,explode=false,name=format"`
	ProjectID          int64                  `pathParam:"style=simple,explode=false,name=project_id"`
	XRedmineSwitchUser *string                `header:"style=simple,explode=false,name=X-Redmine-Switch-User"`
	RequestBody        *CreateFileRequestBody `request:"mediaType=application/json"`
}

func (o *CreateFileRequest) GetFormat() components.Format {
	if o == nil {
		return components.Format("")
	}
	return o.Format
}

func (o *CreateFileRequest) GetProjectID() int64 {
	if o == nil {
		return 0
	}
	return o.ProjectID
}

func (o *CreateFileRequest) GetXRedmineSwitchUser() *string {
	if o == nil {
		return nil
	}
	return o.XRedmineSwitchUser
}

func (o *CreateFileRequest) GetRequestBody() *CreateFileRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type CreateFileResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *CreateFileResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
