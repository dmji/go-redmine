// Code generated by Speakeasy (https://speakeasy.com).

package operations

import (
	"encoding/json"
	"fmt"

	"github.com/dmji/go-redmine/models/components"
)

type GetWikiPageQueryParamInclude string

const (
	GetWikiPageQueryParamIncludeAttachments GetWikiPageQueryParamInclude = "attachments"
)

func (e GetWikiPageQueryParamInclude) ToPointer() *GetWikiPageQueryParamInclude {
	return &e
}

func (e *GetWikiPageQueryParamInclude) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "attachments":
		*e = GetWikiPageQueryParamInclude(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWikiPageQueryParamInclude: %v", v)
	}
}

type GetWikiPageRequest struct {
	Format             components.Format             `pathParam:"style=simple,explode=false,name=format"`
	ProjectID          int64                         `pathParam:"style=simple,explode=false,name=project_id"`
	WikiPageTitle      string                        `pathParam:"style=simple,explode=false,name=wiki_page_title"`
	XRedmineSwitchUser *string                       `header:"style=simple,explode=false,name=X-Redmine-Switch-User"`
	Include            *GetWikiPageQueryParamInclude `queryParam:"style=form,explode=true,name=include"`
}

func (o *GetWikiPageRequest) GetFormat() components.Format {
	if o == nil {
		return components.Format("")
	}
	return o.Format
}

func (o *GetWikiPageRequest) GetProjectID() int64 {
	if o == nil {
		return 0
	}
	return o.ProjectID
}

func (o *GetWikiPageRequest) GetWikiPageTitle() string {
	if o == nil {
		return ""
	}
	return o.WikiPageTitle
}

func (o *GetWikiPageRequest) GetXRedmineSwitchUser() *string {
	if o == nil {
		return nil
	}
	return o.XRedmineSwitchUser
}

func (o *GetWikiPageRequest) GetInclude() *GetWikiPageQueryParamInclude {
	if o == nil {
		return nil
	}
	return o.Include
}

type GetWikiPageResponseBody struct {
	WikiPage components.WikiPage `json:"wiki_page"`
}

func (o *GetWikiPageResponseBody) GetWikiPage() components.WikiPage {
	if o == nil {
		return components.WikiPage{}
	}
	return o.WikiPage
}

type GetWikiPageResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetWikiPageResponseBody
}

func (o *GetWikiPageResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetWikiPageResponse) GetObject() *GetWikiPageResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
