// Code generated by Speakeasy (https://speakeasy.com).

package operations

import (
	"github.com/dmji/go-redmine/models/components"
)

type GetNewsListByProjectRequest struct {
	Format             components.Format          `pathParam:"style=simple,explode=false,name=format"`
	ProjectID          int64                      `pathParam:"style=simple,explode=false,name=project_id"`
	Offset             *int64                     `queryParam:"style=form,explode=true,name=offset"`
	Limit              *int64                     `queryParam:"style=form,explode=true,name=limit"`
	Nometa             *components.Nometa         `queryParam:"style=form,explode=true,name=nometa"`
	XRedmineSwitchUser *string                    `header:"style=simple,explode=false,name=X-Redmine-Switch-User"`
	XRedmineNometa     *components.XRedmineNometa `header:"style=simple,explode=false,name=X-Redmine-Nometa"`
}

func (o *GetNewsListByProjectRequest) GetFormat() components.Format {
	if o == nil {
		return components.Format("")
	}
	return o.Format
}

func (o *GetNewsListByProjectRequest) GetProjectID() int64 {
	if o == nil {
		return 0
	}
	return o.ProjectID
}

func (o *GetNewsListByProjectRequest) GetOffset() *int64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetNewsListByProjectRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetNewsListByProjectRequest) GetNometa() *components.Nometa {
	if o == nil {
		return nil
	}
	return o.Nometa
}

func (o *GetNewsListByProjectRequest) GetXRedmineSwitchUser() *string {
	if o == nil {
		return nil
	}
	return o.XRedmineSwitchUser
}

func (o *GetNewsListByProjectRequest) GetXRedmineNometa() *components.XRedmineNometa {
	if o == nil {
		return nil
	}
	return o.XRedmineNometa
}

type GetNewsListByProjectResponseBody struct {
	News       []components.News `json:"news"`
	TotalCount *int64            `json:"total_count,omitempty"`
	Offset     *int64            `json:"offset,omitempty"`
	Limit      *int64            `json:"limit,omitempty"`
}

func (o *GetNewsListByProjectResponseBody) GetNews() []components.News {
	if o == nil {
		return []components.News{}
	}
	return o.News
}

func (o *GetNewsListByProjectResponseBody) GetTotalCount() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalCount
}

func (o *GetNewsListByProjectResponseBody) GetOffset() *int64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetNewsListByProjectResponseBody) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

type GetNewsListByProjectResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetNewsListByProjectResponseBody
}

func (o *GetNewsListByProjectResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetNewsListByProjectResponse) GetObject() *GetNewsListByProjectResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
