// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/dmji/go-redmine/models/components"
)

type GetProjectsQueryParamInclude string

const (
	GetProjectsQueryParamIncludeTrackers            GetProjectsQueryParamInclude = "trackers"
	GetProjectsQueryParamIncludeIssueCategories     GetProjectsQueryParamInclude = "issue_categories"
	GetProjectsQueryParamIncludeTimeEntryActivities GetProjectsQueryParamInclude = "time_entry_activities"
	GetProjectsQueryParamIncludeEnabledModules      GetProjectsQueryParamInclude = "enabled_modules"
	GetProjectsQueryParamIncludeIssueCustomFields   GetProjectsQueryParamInclude = "issue_custom_fields"
)

func (e GetProjectsQueryParamInclude) ToPointer() *GetProjectsQueryParamInclude {
	return &e
}
func (e *GetProjectsQueryParamInclude) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "trackers":
		fallthrough
	case "issue_categories":
		fallthrough
	case "time_entry_activities":
		fallthrough
	case "enabled_modules":
		fallthrough
	case "issue_custom_fields":
		*e = GetProjectsQueryParamInclude(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsQueryParamInclude: %v", v)
	}
}

type IsPublic string

const (
	IsPublicZero IsPublic = "0"
	IsPublicOne  IsPublic = "1"
)

func (e IsPublic) ToPointer() *IsPublic {
	return &e
}
func (e *IsPublic) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "0":
		fallthrough
	case "1":
		*e = IsPublic(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IsPublic: %v", v)
	}
}

type GetProjectsRequest struct {
	Format             components.Format              `pathParam:"style=simple,explode=false,name=format"`
	Offset             *int64                         `queryParam:"style=form,explode=true,name=offset"`
	Limit              *int64                         `queryParam:"style=form,explode=true,name=limit"`
	Nometa             *components.Nometa             `queryParam:"style=form,explode=true,name=nometa"`
	XRedmineSwitchUser *string                        `header:"style=simple,explode=false,name=X-Redmine-Switch-User"`
	XRedmineNometa     *components.XRedmineNometa     `header:"style=simple,explode=false,name=X-Redmine-Nometa"`
	Include            []GetProjectsQueryParamInclude `queryParam:"style=form,explode=false,name=include"`
	Status             []int64                        `queryParam:"style=form,explode=false,name=status"`
	ID                 []string                       `queryParam:"style=form,explode=false,name=id"`
	Name               *string                        `queryParam:"style=form,explode=true,name=name"`
	Description        *string                        `queryParam:"style=form,explode=true,name=description"`
	ParentID           []string                       `queryParam:"style=form,explode=false,name=parent_id"`
	IsPublic           []IsPublic                     `queryParam:"style=form,explode=false,name=is_public"`
	CreatedOn          *string                        `queryParam:"style=form,explode=true,name=created_on"`
}

func (o *GetProjectsRequest) GetFormat() components.Format {
	if o == nil {
		return components.Format("")
	}
	return o.Format
}

func (o *GetProjectsRequest) GetOffset() *int64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetProjectsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetProjectsRequest) GetNometa() *components.Nometa {
	if o == nil {
		return nil
	}
	return o.Nometa
}

func (o *GetProjectsRequest) GetXRedmineSwitchUser() *string {
	if o == nil {
		return nil
	}
	return o.XRedmineSwitchUser
}

func (o *GetProjectsRequest) GetXRedmineNometa() *components.XRedmineNometa {
	if o == nil {
		return nil
	}
	return o.XRedmineNometa
}

func (o *GetProjectsRequest) GetInclude() []GetProjectsQueryParamInclude {
	if o == nil {
		return nil
	}
	return o.Include
}

func (o *GetProjectsRequest) GetStatus() []int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetProjectsRequest) GetID() []string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetProjectsRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetProjectsRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetProjectsRequest) GetParentID() []string {
	if o == nil {
		return nil
	}
	return o.ParentID
}

func (o *GetProjectsRequest) GetIsPublic() []IsPublic {
	if o == nil {
		return nil
	}
	return o.IsPublic
}

func (o *GetProjectsRequest) GetCreatedOn() *string {
	if o == nil {
		return nil
	}
	return o.CreatedOn
}

type GetProjectsResponseBody struct {
	Projects   []components.ProjectSimple `json:"projects"`
	TotalCount *int64                     `json:"total_count,omitempty"`
	Offset     *int64                     `json:"offset,omitempty"`
	Limit      *int64                     `json:"limit,omitempty"`
}

func (o *GetProjectsResponseBody) GetProjects() []components.ProjectSimple {
	if o == nil {
		return []components.ProjectSimple{}
	}
	return o.Projects
}

func (o *GetProjectsResponseBody) GetTotalCount() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalCount
}

func (o *GetProjectsResponseBody) GetOffset() *int64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetProjectsResponseBody) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

type GetProjectsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetProjectsResponseBody
}

func (o *GetProjectsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetProjectsResponse) GetObject() *GetProjectsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
