// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/dmji/go-redmine/models/components"
)

type GetProjectQueryParamInclude string

const (
	GetProjectQueryParamIncludeTrackers            GetProjectQueryParamInclude = "trackers"
	GetProjectQueryParamIncludeIssueCategories     GetProjectQueryParamInclude = "issue_categories"
	GetProjectQueryParamIncludeTimeEntryActivities GetProjectQueryParamInclude = "time_entry_activities"
	GetProjectQueryParamIncludeEnabledModules      GetProjectQueryParamInclude = "enabled_modules"
	GetProjectQueryParamIncludeIssueCustomFields   GetProjectQueryParamInclude = "issue_custom_fields"
)

func (e GetProjectQueryParamInclude) ToPointer() *GetProjectQueryParamInclude {
	return &e
}
func (e *GetProjectQueryParamInclude) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "trackers":
		fallthrough
	case "issue_categories":
		fallthrough
	case "time_entry_activities":
		fallthrough
	case "enabled_modules":
		fallthrough
	case "issue_custom_fields":
		*e = GetProjectQueryParamInclude(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectQueryParamInclude: %v", v)
	}
}

type GetProjectRequest struct {
	Format             components.Format             `pathParam:"style=simple,explode=false,name=format"`
	ProjectID          int64                         `pathParam:"style=simple,explode=false,name=project_id"`
	XRedmineSwitchUser *string                       `header:"style=simple,explode=false,name=X-Redmine-Switch-User"`
	Include            []GetProjectQueryParamInclude `queryParam:"style=form,explode=false,name=include"`
}

func (o *GetProjectRequest) GetFormat() components.Format {
	if o == nil {
		return components.Format("")
	}
	return o.Format
}

func (o *GetProjectRequest) GetProjectID() int64 {
	if o == nil {
		return 0
	}
	return o.ProjectID
}

func (o *GetProjectRequest) GetXRedmineSwitchUser() *string {
	if o == nil {
		return nil
	}
	return o.XRedmineSwitchUser
}

func (o *GetProjectRequest) GetInclude() []GetProjectQueryParamInclude {
	if o == nil {
		return nil
	}
	return o.Include
}

type GetProjectResponseBody struct {
	Project components.Project `json:"project"`
}

func (o *GetProjectResponseBody) GetProject() components.Project {
	if o == nil {
		return components.Project{}
	}
	return o.Project
}

type GetProjectResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetProjectResponseBody
}

func (o *GetProjectResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetProjectResponse) GetObject() *GetProjectResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
