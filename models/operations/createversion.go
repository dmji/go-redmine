// Code generated by Speakeasy (https://speakeasy.com).

package operations

import (
	"encoding/json"
	"fmt"

	"github.com/dmji/go-redmine/internal/utils"
	"github.com/dmji/go-redmine/models/components"
	"github.com/dmji/go-redmine/types"
)

type Status string

const (
	StatusOpen   Status = "open"
	StatusLocked Status = "locked"
	StatusClosed Status = "closed"
)

func (e Status) ToPointer() *Status {
	return &e
}

func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "locked":
		fallthrough
	case "closed":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

type Sharing string

const (
	SharingNone        Sharing = "none"
	SharingDescendants Sharing = "descendants"
	SharingHierarchy   Sharing = "hierarchy"
	SharingTree        Sharing = "tree"
	SharingSystem      Sharing = "system"
)

func (e Sharing) ToPointer() *Sharing {
	return &e
}

func (e *Sharing) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "descendants":
		fallthrough
	case "hierarchy":
		fallthrough
	case "tree":
		fallthrough
	case "system":
		*e = Sharing(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Sharing: %v", v)
	}
}

type Version struct {
	Name              string                    `json:"name"`
	Status            *Status                   `json:"status,omitempty"`
	Sharing           *Sharing                  `json:"sharing,omitempty"`
	DueDate           *types.Date               `json:"due_date,omitempty"`
	Description       *string                   `json:"description,omitempty"`
	WikiPageTitle     *string                   `json:"wiki_page_title,omitempty"`
	CustomFields      []components.CustomFields `json:"custom_fields,omitempty"`
	CustomFieldValues map[string]any            `json:"custom_field_values,omitempty"`
}

func (v Version) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *Version) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Version) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Version) GetStatus() *Status {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Version) GetSharing() *Sharing {
	if o == nil {
		return nil
	}
	return o.Sharing
}

func (o *Version) GetDueDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.DueDate
}

func (o *Version) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Version) GetWikiPageTitle() *string {
	if o == nil {
		return nil
	}
	return o.WikiPageTitle
}

func (o *Version) GetCustomFields() []components.CustomFields {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *Version) GetCustomFieldValues() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomFieldValues
}

type CreateVersionRequestBody struct {
	Version Version `json:"version"`
}

func (o *CreateVersionRequestBody) GetVersion() Version {
	if o == nil {
		return Version{}
	}
	return o.Version
}

type CreateVersionRequest struct {
	Format             components.Format         `pathParam:"style=simple,explode=false,name=format"`
	ProjectID          int64                     `pathParam:"style=simple,explode=false,name=project_id"`
	XRedmineSwitchUser *string                   `header:"style=simple,explode=false,name=X-Redmine-Switch-User"`
	RequestBody        *CreateVersionRequestBody `request:"mediaType=application/json"`
}

func (o *CreateVersionRequest) GetFormat() components.Format {
	if o == nil {
		return components.Format("")
	}
	return o.Format
}

func (o *CreateVersionRequest) GetProjectID() int64 {
	if o == nil {
		return 0
	}
	return o.ProjectID
}

func (o *CreateVersionRequest) GetXRedmineSwitchUser() *string {
	if o == nil {
		return nil
	}
	return o.XRedmineSwitchUser
}

func (o *CreateVersionRequest) GetRequestBody() *CreateVersionRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type CreateVersionResponseBody struct {
	Version components.Version `json:"version"`
}

func (o *CreateVersionResponseBody) GetVersion() components.Version {
	if o == nil {
		return components.Version{}
	}
	return o.Version
}

type CreateVersionResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *CreateVersionResponseBody
}

func (o *CreateVersionResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateVersionResponse) GetObject() *CreateVersionResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
