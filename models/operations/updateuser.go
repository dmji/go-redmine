// Code generated by Speakeasy (https://speakeasy.com).

package operations

import (
	"encoding/json"
	"fmt"

	"github.com/dmji/go-redmine/models/components"
)

type UpdateUserMailNotification string

const (
	UpdateUserMailNotificationAll          UpdateUserMailNotification = "all"
	UpdateUserMailNotificationSelected     UpdateUserMailNotification = "selected"
	UpdateUserMailNotificationOnlyMyEvents UpdateUserMailNotification = "only_my_events"
	UpdateUserMailNotificationOnlyAssigned UpdateUserMailNotification = "only_assigned"
	UpdateUserMailNotificationOnlyOwner    UpdateUserMailNotification = "only_owner"
	UpdateUserMailNotificationNone         UpdateUserMailNotification = "none"
)

func (e UpdateUserMailNotification) ToPointer() *UpdateUserMailNotification {
	return &e
}

func (e *UpdateUserMailNotification) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "selected":
		fallthrough
	case "only_my_events":
		fallthrough
	case "only_assigned":
		fallthrough
	case "only_owner":
		fallthrough
	case "none":
		*e = UpdateUserMailNotification(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateUserMailNotification: %v", v)
	}
}

type UpdateUserUser struct {
	Login              *string                     `json:"login,omitempty"`
	Admin              *bool                       `json:"admin,omitempty"`
	Password           *string                     `json:"password,omitempty"`
	Firstname          *string                     `json:"firstname,omitempty"`
	Lastname           *string                     `json:"lastname,omitempty"`
	Mail               *string                     `json:"mail,omitempty"`
	Language           *string                     `json:"language,omitempty"`
	AuthSourceID       *int64                      `json:"auth_source_id,omitempty"`
	MailNotification   *UpdateUserMailNotification `json:"mail_notification,omitempty"`
	NotifiedProjectIds []int64                     `json:"notified_project_ids,omitempty"`
	MustChangePasswd   *bool                       `json:"must_change_passwd,omitempty"`
	GeneratePassword   *bool                       `json:"generate_password,omitempty"`
	Status             *int64                      `json:"status,omitempty"`
	CustomFields       []components.CustomFields   `json:"custom_fields,omitempty"`
	CustomFieldValues  map[string]any              `json:"custom_field_values,omitempty"`
	GroupIds           []int64                     `json:"group_ids,omitempty"`
}

func (o *UpdateUserUser) GetLogin() *string {
	if o == nil {
		return nil
	}
	return o.Login
}

func (o *UpdateUserUser) GetAdmin() *bool {
	if o == nil {
		return nil
	}
	return o.Admin
}

func (o *UpdateUserUser) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

func (o *UpdateUserUser) GetFirstname() *string {
	if o == nil {
		return nil
	}
	return o.Firstname
}

func (o *UpdateUserUser) GetLastname() *string {
	if o == nil {
		return nil
	}
	return o.Lastname
}

func (o *UpdateUserUser) GetMail() *string {
	if o == nil {
		return nil
	}
	return o.Mail
}

func (o *UpdateUserUser) GetLanguage() *string {
	if o == nil {
		return nil
	}
	return o.Language
}

func (o *UpdateUserUser) GetAuthSourceID() *int64 {
	if o == nil {
		return nil
	}
	return o.AuthSourceID
}

func (o *UpdateUserUser) GetMailNotification() *UpdateUserMailNotification {
	if o == nil {
		return nil
	}
	return o.MailNotification
}

func (o *UpdateUserUser) GetNotifiedProjectIds() []int64 {
	if o == nil {
		return nil
	}
	return o.NotifiedProjectIds
}

func (o *UpdateUserUser) GetMustChangePasswd() *bool {
	if o == nil {
		return nil
	}
	return o.MustChangePasswd
}

func (o *UpdateUserUser) GetGeneratePassword() *bool {
	if o == nil {
		return nil
	}
	return o.GeneratePassword
}

func (o *UpdateUserUser) GetStatus() *int64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateUserUser) GetCustomFields() []components.CustomFields {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *UpdateUserUser) GetCustomFieldValues() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomFieldValues
}

func (o *UpdateUserUser) GetGroupIds() []int64 {
	if o == nil {
		return nil
	}
	return o.GroupIds
}

type UpdateUserRequestBody struct {
	User            *UpdateUserUser  `json:"user,omitempty"`
	SendInformation *bool            `json:"send_information,omitempty"`
	Pref            *components.Pref `json:"pref,omitempty"`
}

func (o *UpdateUserRequestBody) GetUser() *UpdateUserUser {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *UpdateUserRequestBody) GetSendInformation() *bool {
	if o == nil {
		return nil
	}
	return o.SendInformation
}

func (o *UpdateUserRequestBody) GetPref() *components.Pref {
	if o == nil {
		return nil
	}
	return o.Pref
}

type UpdateUserRequest struct {
	Format             components.Format      `pathParam:"style=simple,explode=false,name=format"`
	UserID             int64                  `pathParam:"style=simple,explode=false,name=user_id"`
	XRedmineSwitchUser *string                `header:"style=simple,explode=false,name=X-Redmine-Switch-User"`
	RequestBody        *UpdateUserRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateUserRequest) GetFormat() components.Format {
	if o == nil {
		return components.Format("")
	}
	return o.Format
}

func (o *UpdateUserRequest) GetUserID() int64 {
	if o == nil {
		return 0
	}
	return o.UserID
}

func (o *UpdateUserRequest) GetXRedmineSwitchUser() *string {
	if o == nil {
		return nil
	}
	return o.XRedmineSwitchUser
}

func (o *UpdateUserRequest) GetRequestBody() *UpdateUserRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateUserResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *UpdateUserResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
