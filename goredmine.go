// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package goredmine

import (
	"context"
	"fmt"
	"github.com/dmji/go-redmine/internal/hooks"
	"github.com/dmji/go-redmine/internal/utils"
	"github.com/dmji/go-redmine/models/components"
	"github.com/dmji/go-redmine/retry"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https:///",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

type sdkConfiguration struct {
	Client            HTTPClient
	Security          func(context.Context) (interface{}, error)
	ServerURL         string
	ServerIndex       int
	Language          string
	OpenAPIDocVersion string
	SDKVersion        string
	GenVersion        string
	UserAgent         string
	RetryConfig       *retry.Config
	Hooks             *hooks.Hooks
	Timeout           *time.Duration
}

func (c *sdkConfiguration) GetServerDetails() (string, map[string]string) {
	if c.ServerURL != "" {
		return c.ServerURL, nil
	}

	return ServerList[c.ServerIndex], nil
}

// GoRedmine - Redmine API: Unofficial OpenAPI specification for the Redmine API.
//
// https://www.redmine.org/projects/redmine/wiki/Rest_api - Redmine API Official Developer Guide
type GoRedmine struct {
	// Status: Stable, Availablity: 1.0
	//
	// https://www.redmine.org/projects/redmine/wiki/Rest_Issues
	Issues *Issues
	// Status: Stable, Availablity: 1.0
	//
	// https://www.redmine.org/projects/redmine/wiki/Rest_Projects
	Projects           *Projects
	ProjectMemberships *ProjectMemberships
	// Status: Stable, Availablity: 1.1
	//
	// https://www.redmine.org/projects/redmine/wiki/Rest_Users
	Users       *Users
	TimeEntries *TimeEntries
	// Status: Prototype, Availablity: 1.1
	//
	// https://www.redmine.org/projects/redmine/wiki/Rest_News
	News           *News
	IssueRelations *IssueRelations
	// Status: Alpha, Availablity: 1.3
	//
	// https://www.redmine.org/projects/redmine/wiki/Rest_Versions
	Versions  *Versions
	WikiPages *WikiPages
	// Status: Alpha, Availablity: 1.3
	//
	// https://www.redmine.org/projects/redmine/wiki/Rest_Queries
	Queries *Queries
	// Status: Beta, Availablity: 1.3
	//
	// https://www.redmine.org/projects/redmine/wiki/Rest_Attachments
	Attachments   *Attachments
	IssueStatuses *IssueStatuses
	// Status: Alpha, Availablity: 1.3
	//
	// https://www.redmine.org/projects/redmine/wiki/Rest_Trackers
	Trackers        *Trackers
	IssueCategories *IssueCategories
	// Status: Alpha, Availablity: 2.2
	//
	// https://www.redmine.org/projects/redmine/wiki/Rest_Enumerations
	Enumerations *Enumerations
	// Status: Alpha, Availablity: 1.4
	//
	// https://www.redmine.org/projects/redmine/wiki/Rest_Roles
	Roles *Roles
	// Status: Alpha, Availablity: 2.1
	//
	// https://www.redmine.org/projects/redmine/wiki/Rest_Groups
	Groups       *Groups
	CustomFields *CustomFields
	// Status: Alpha, Availablity: 3.3
	//
	// https://www.redmine.org/projects/redmine/wiki/Rest_Search
	Search *Search
	// Status: Alpha, Availablity: 3.4
	//
	// https://www.redmine.org/projects/redmine/wiki/Rest_Files
	Files     *Files
	MyAccount *MyAccount
	// Status: Alpha, Availablity: 5.0
	//
	// https://www.redmine.org/projects/redmine/wiki/Rest_Journals?parent=Rest_api
	Journals *Journals
	// Undocumented
	Repositories *Repositories

	sdkConfiguration sdkConfiguration
}

type SDKOption func(*GoRedmine)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *GoRedmine) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *GoRedmine) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServerIndex allows the overriding of the default server by index
func WithServerIndex(serverIndex int) SDKOption {
	return func(sdk *GoRedmine) {
		if serverIndex < 0 || serverIndex >= len(ServerList) {
			panic(fmt.Errorf("server index %d out of range", serverIndex))
		}

		sdk.sdkConfiguration.ServerIndex = serverIndex
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *GoRedmine) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(security components.Security) SDKOption {
	return func(sdk *GoRedmine) {
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (components.Security, error)) SDKOption {
	return func(sdk *GoRedmine) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *GoRedmine) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *GoRedmine) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *GoRedmine {
	sdk := &GoRedmine{
		sdkConfiguration: sdkConfiguration{
			Language:          "go",
			OpenAPIDocVersion: "0.16.0",
			SDKVersion:        "0.1.0",
			GenVersion:        "2.500.5",
			UserAgent:         "speakeasy-sdk/go 0.1.0 2.500.5 0.16.0 github.com/dmji/go-redmine",
			Hooks:             hooks.New(),
		},
	}
	for _, opt := range opts {
		opt(sdk)
	}

	if sdk.sdkConfiguration.Security == nil {
		var envVarSecurity components.Security
		if utils.PopulateSecurityFromEnv(&envVarSecurity) {
			sdk.sdkConfiguration.Security = utils.AsSecuritySource(envVarSecurity)
		}
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	currentServerURL, _ := sdk.sdkConfiguration.GetServerDetails()
	serverURL := currentServerURL
	serverURL, sdk.sdkConfiguration.Client = sdk.sdkConfiguration.Hooks.SDKInit(currentServerURL, sdk.sdkConfiguration.Client)
	if serverURL != currentServerURL {
		sdk.sdkConfiguration.ServerURL = serverURL
	}

	sdk.Issues = newIssues(sdk.sdkConfiguration)

	sdk.Projects = newProjects(sdk.sdkConfiguration)

	sdk.ProjectMemberships = newProjectMemberships(sdk.sdkConfiguration)

	sdk.Users = newUsers(sdk.sdkConfiguration)

	sdk.TimeEntries = newTimeEntries(sdk.sdkConfiguration)

	sdk.News = newNews(sdk.sdkConfiguration)

	sdk.IssueRelations = newIssueRelations(sdk.sdkConfiguration)

	sdk.Versions = newVersions(sdk.sdkConfiguration)

	sdk.WikiPages = newWikiPages(sdk.sdkConfiguration)

	sdk.Queries = newQueries(sdk.sdkConfiguration)

	sdk.Attachments = newAttachments(sdk.sdkConfiguration)

	sdk.IssueStatuses = newIssueStatuses(sdk.sdkConfiguration)

	sdk.Trackers = newTrackers(sdk.sdkConfiguration)

	sdk.IssueCategories = newIssueCategories(sdk.sdkConfiguration)

	sdk.Enumerations = newEnumerations(sdk.sdkConfiguration)

	sdk.Roles = newRoles(sdk.sdkConfiguration)

	sdk.Groups = newGroups(sdk.sdkConfiguration)

	sdk.CustomFields = newCustomFields(sdk.sdkConfiguration)

	sdk.Search = newSearch(sdk.sdkConfiguration)

	sdk.Files = newFiles(sdk.sdkConfiguration)

	sdk.MyAccount = newMyAccount(sdk.sdkConfiguration)

	sdk.Journals = newJournals(sdk.sdkConfiguration)

	sdk.Repositories = newRepositories(sdk.sdkConfiguration)

	return sdk
}
